- hosts: all
  become: yes
  become_method: sudo

  vars_files:
    - vars.yml

  tasks:
    - name: update apt cache
      apt: update_cache=yes

    - name: Install packages and python and ruby
      apt: name={{item}} state=present update_cache=yes
      with_items:
        - python
        - vim
        - python-software-properties
        - debconf-utils
        - curl
        - git
        - build-essential
        - python-dev
        - python-pip
        - libmysqlclient-dev
        - python-mysqldb
        - sqlite3
        - libsqlite3-dev
        - ruby-dev
        - rubygems
        - apt-transport-https
        - lsb-release
        - ca-certificates

    - name: Remove apache
      apt:
        name: apache2
        state: absent

    - name: Install Python python pexpect
      pip:
        name: pexpect

    ## install mailcatcher
    # - name: MailCatcher | Install MailCatcher
    #   action: command gem install mailcatcher creates=/usr/local/bin/mailcatcher

    # - name: MailCatcher | Configure FPM PHP.ini
    #   command: sed -ir "s/;\?sendmail_path =.*/sendmail_path = \/usr\/bin\/env \/usr\/local\/bin\/catchmail/" /etc/php/7.0/fpm/php.ini

    # - name: MailCatcher | Configure CLI PHP.ini
    #   command: sed -ir "s/;\?sendmail_path =.*/sendmail_path = \/usr\/bin\/env \/usr\/local\/bin\/catchmail/" /etc/php/7.0/cli/php.ini

    # - name: MailCatcher | Configure Systemd Autostart Script
    #   template: src=mailcatcher/mailcatcher_init.conf dest=/lib/systemd/system/mailcatcher.service

    ### install nginx
    - name: Adding Nginx APT repository key
      apt_key:
        url: "http://nginx.org/keys/nginx_signing.key"
        state: present

    - name: Add official Nginx APT repository
      apt_repository:
        repo: "deb http://nginx.org/packages/debian/ jessie nginx"
        state: present
        filename: "nginx"

    - name: Add official Nginx APT repository
      apt_repository:
        repo: "deb-src http://nginx.org/packages/debian/ jessie nginx"
        state: present
        filename: "nginx"

      #name: "nginx={{nginx_version}}"
    - name: Install Nginx
      apt:
        #name: "nginx=1.11.6"
        name: nginx
        state: present
        cache_valid_time: 3600

    - name: Create Nginx temp directories
      file:
        path: "{{item}}"
        state: directory
        owner: vagrant
        group: root
        mode: 0700
      with_items:
        - /tmp/nginx
        - /tmp/nginx/cache
        - /tmp/nginx/client_temp
        - /tmp/nginx/fastcgi_temp
        - /tmp/nginx/lib
        - /tmp/nginx/proxy_temp
        - /tmp/nginx/scgi_temp
        - /tmp/nginx/uwsgi_temp

    - name: Copy nginx config
      copy:
        src: nginx/nginx.conf
        dest: /etc/nginx/nginx.conf
        owner: root
        group: root
        mode: 0644

    - name: Copy nginx config
      copy:
        src: nginx/magento.conf
        dest: /etc/nginx/magento.conf
        owner: root
        group: root
        mode: 0644

    ### install php7 + fpm
    - name: Adding PHP7.1 APT repository key
      apt_key:
        url: "https://packages.sury.org/php/apt.gpg"
        state: present

    - name: Add official PHP7.1 APT repository
      apt_repository:
        repo: "deb https://packages.sury.org/php/ jessie main"
        state: present
        filename: "php"

    - name: Add official PHP7.1 APT repository
      apt_repository:
        repo: "deb-src https://packages.sury.org/php/ jessie main"
        state: present
        filename: "php"

    - name: Install PHP7.1 CLI
      apt:
        name: php7.1
        state: present
        cache_valid_time: 3600

    - name: Install PHP7.1 CLI & FPM with extensions
      apt: name={{item}} state=present update_cache=yes
      with_items:
        - php7.1-cli
        - php7.1-fpm
        - php7.1-mysql
        - php7.1-mcrypt
        - php7.1-curl
        - php7.1-gd
        - php7.1-intl
        - php7.1-xml
        - php7.1-xsl
        - php7.1-zip
        - php7.1-mbstring
        - php7.1-bcmath
        - php7.1-soap

    - name: Copy PHP FPM config
      copy:
        src: php/www.conf
        dest: /etc/php/7.1/fpm/pool.d/www.conf
        owner: root
        group: root
        mode: 0644

    - name: Bump PHP FPM memory limit
      ini_file: dest=/etc/php/7.1/fpm/php.ini section=PHP option=memory_limit value=2G backup=yes

    - name: Bump PHP CLI memory limit
      ini_file: dest=/etc/php/7.1/cli/php.ini section=PHP option=memory_limit value=2G backup=yes

    - name: Restart Nginx
      service:
        name: nginx
        state: restarted

    - name: Restart PHP-FPM
      service:
        name: php7.1-fpm
        state: restarted

    ### install composer
    - name: Download composer
      get_url:
        url: https://getcomposer.org/installer
        dest: /tmp/installer
      tags: composer

    - name: Install composer
      shell: cat /tmp/installer | php -- --install-dir=/usr/local/bin
      args:
        creates: /usr/local/bin/composer
      tags: composer

    - name: Rename composer.phar to composer
      shell: mv /usr/local/bin/composer.phar /usr/local/bin/composer
      args:
        creates: /usr/local/bin/composer
      tags: composer

    - name: Make composer executable
      file:
        path: /usr/local/bin/composer
        mode: a+x
        state: file
      tags: composer

      ### install MariaDB 10.1.20

    - name: Maria DB pre-requisites
      apt:
        name: software-properties-common
        state: present
        update_cache: yes
        cache_valid_time: 3600

    - name: MariaDB APT repository key
      apt_key: keyserver=keyserver.ubuntu.com
        id=0xcbcb082a1bb943db

    - name: Add official MariaDB APT repository
      apt_repository:
        repo: "deb [arch=amd64,i386] http://mirrors.accretive-networks.net/mariadb/repo/10.1/debian jessie main"
        state: present
        filename: "mariadb"

    - name: Add official MariaDB APT repository
      apt_repository:
        repo: "deb-src http://mirrors.accretive-networks.net/mariadb/repo/10.1/debian jessie main"
        state: present
        filename: "mariadb"

    - name: Install MariaDB server
      apt:
        name: mariadb-server
        state: present
        update_cache: yes
        cache_valid_time: 3600

    - name: Change MariaDB auto_increment_increment to 3
      ini_file: dest=/etc/mysql/my.cnf section=mysqld option=auto_increment_increment value=3 backup=yes

    - name: Create mysql database
      mysql_db:
        name: "{{ mysql_database }}"
        state: present

    - name: Create mysql user
      mysql_user:
        name: "{{ mysql_user }}"
        password: "{{ mysql_pass }}"
        priv: "{{ mysql_database }}.*:ALL"
        state: present

    ### Install magneto-cloud
    - name: Install Magento Cloud CLI
      command: bash -c "curl -sS https://accounts.magento.cloud/cli/installer | php"
      become: yes
      become_user: vagrant

    - name: Source Magneto CLI Bash command shortcut
      command: bash -c "source ~/.bashrc"
      become: yes
      become_user: vagrant

    ### Setup Magento cron jobs
    - name: "Magneto cron:run"
      cron:
        name: "Magneto cron:run"
        user: vagrant
        job: 'php /app/bin/magento cron:run | grep -v "Ran jobs by schedule" >> /app/var/log/magento.cron.log'

    - name: "Magneto cron.php"
      cron:
        name: "Magneto cron.php"
        user: vagrant
        job: "php /app/update/cron.php >> /app/var/log/update.cron.log"

    - name: "Magneto cron setup:cron:run"
      cron:
        name: "Magneto cron setup:cron:run"
        user: vagrant
        job: "php /app/bin/magento setup:cron:run >> /app/var/log/setup.cron.log"

    ## Install ZSH
    - name: Install Zsh
      command: sh -c "sudo apt-get install zsh -y"
      become: yes
      become_user: vagrant

    - name: Set ZSH as default shell
      command: sh -c "sudo chsh -s $(which zsh) vagrant"

    - name: Install Oh My Zsh
      command: sh -c "wget --no-check-certificate https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | zsh || true"
      become: yes
      become_user: vagrant

    - name: Change default ZSH theme
      command: sh -c "sed -i 's/robbyrussell/ys/g' /home/vagrant/.zshrc"
      become: yes
      become_user: vagrant

    ### Add linuxuprising repository
    - name: Add linuxuprising apt repository
      apt_repository:
        repo: "deb http://ppa.launchpad.net/linuxuprising/java/ubuntu bionic main"
        state: present

    - name: Add linuxuprising apt repository
      apt_repository:
        repo: "deb-src http://ppa.launchpad.net/linuxuprising/java/ubuntu bionic main"
        state: present

    - name: Add linuxuprising APT repository public key
      command: sh -c "apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 73C3DB2A"

    ### Update cache
    - name: update apt cache
      apt: update_cache=yes

    ### Install Oracle Java 11
    - name: Accept Oracle JDK 11 license
      debconf:
        name: "oracle-java11-installer"
        question: "shared/accepted-oracle-license-v1-2"
        value: "true"
        vtype: "select"

    - name: Accept Oracle JDK 11 license
      debconf:
        name: "oracle-java11-installer"
        question: "shared/accepted-oracle-license-v1-2"
        value: "true"
        vtype: "boolean"

    - name: Install Oracle JDK 11
      command: sh -c "sudo apt-get install oracle-java11-installer -y;"

    ### Add ElasticSearch GPG key
    - name: Add ElasticSearch GPG key
      command: sh -c "wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -"

    ### Add ElasticSearch Repository
    - name: Add ElasticSearch Repository
      apt_repository:
        repo: "deb https://artifacts.elastic.co/packages/6.x/apt stable main"
        state: present

    - name: update apt cache
      apt: update_cache=yes

    ### Install ElasticSearch
    - name: Install ElasticSearch
      apt:
        name: elasticsearch
        state: present
    ### Start ElasticSearch
    - name: Start ElasticSearch
      command: sh -c "sudo service elasticsearch start"
    ### Install ElasticSearch required extensions
    - name: Install ElasticSearch required extensions
      command:
        sh -c "sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install analysis-phonetic;
        sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install analysis-icu; "

    ### Restart ElasticSearch service
    - name: Restart ElasticSearch service
      command: sh -c "sudo service elasticsearch restart"
  ############# We have to log in to Magneto Cloud manually, so... follow the guide
  #- name: Login to Magento Cloud
  #  expect:
  #    command: bash -c "sudo -u vagrant /home/vagrant/.magento-cloud/bin/magento-cloud login"
  #    responses:
  #      (?i)address: "{{ magento_username }}"
  #      (?i)password: "{{ magento_password }}"

  #- name: Check out code environment
  #  command: bash -c "sudo -u vagrant /home/vagrant/.magento-cloud/bin/magento-cloud get -- {{ magento_project_id }} /app {{ magento_project_id }}"

  ## Manual steps:
  # http://devdocs.magento.com/guides/v2.1/cloud/access-acct/set-up-env.html

  # log in to VM
  # $ git config --global user.name "<your name>"
  # $ git config --global user.email <your e-mail address>
  # $ magento-cloud auth:login
  # $ magento-cloud get -- {{ magento_project_id }} /app
  # $ cd /app
  # $ composer install
  # $ find var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \;
  # $ find var vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} \;
  # $ chown -R :vagrant .
  # $ chmod u+x bin/magento
  # change local hosts file to: 10.22.22.100 {{ site_url }}
  # magento setup:install --base-url="http://{{ site_url }}" --db-host=localhost --db-name="{{ mysql_database }}" --db-user="{{ mysql_user }}" --db-password="{{ mysql_pass }}" --admin-firstname=Magento --admin-lastname=Admin --admin-email="{{ admin_email }}" --admin-user="{{ admin_user }} --admin-password="{{ admin_password }}" --language=en_US --currency=USD --timezone=America/Los_Angeles --use-rewrites=1
